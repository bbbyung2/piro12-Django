<AskDjango>


01.개발환경 구축하기

* 웹 프레임워크의 필요성
웹 서비스의 필요성 - 서버의 역할, 모든 서비스의 근간
만들 수 있는 것 - 웹 서비스, 앱 서버, 챗봇 서비스
웹 프레임워크 - 웹서비스를 만들 때마다 반복되는 것들을 표준화해서 묶어놓음

* 다양한 파이썬 웹프레임워크
- Django : 백엔드 개발에 필요한 거의 모든 기능 제공(full stack framework)
- Flask : 백엔드 개발에 필요한 일부분의 기능 제공(micro framework)
- Pyramid
- Bottle

* Django의 강점
1. Python 생태계(크롤링, 자동화, 머신러닝 코드와 같은 언어)
2. full stack web framework

* 웹서비스 개발파트
- 백엔드 개발 (서비스 중심)
- 서버 운영
- 프론트엔드 개발
- 앱 개발

* 기본 생성된 파일/디렉토리 목록
piro12-Django : 프로젝트명(이름 변경 가능)
manage.py - 명령행을 통해 각종 장고 명령 수행
mysite - 프로젝트명(함부로 수정 x)
__init__.py
settings.py - 현재 프로젝트의 장고 기본설정, 새롭게 지정할 설정들
urls.py - 최상의 URL 설정
wsgi.py - 실서비스에서의 웹서비스 진입점


02. 장고의 주요 구성 요소
* 장고의 주요 기능(본코스)
1. Function Based Views : 함수(호출 가능한 객체)로 HTTP 요청 초리
2. Models : DB와의 인터페이스
3. Templates : 복잡한 문자열 조합을 보다 용이하게 해줌(주로 문자열 조합 목적)
4. Admin : DB 레코드 관리 UI
5. Logging : 다양한 경로로 메세지 로깅
6. Static files : 개발 목적으로의 정적인 파일 관리
7. Message framework : 유저에게 1회성 메세지 노출 목적

* 장고의 주요 기능(별도 코스)
1. Class Based Views : 클래스로 함수 기반 뷰 만들기
2. Forms : 입력폼 생성, 입력값 유효성 검사 및 DB로의 저장
3. 테스팅
4. 국제화 & 지역화
5. 캐싱
6. Geographic : 위치 검색 기능(DB의 Geo 기능 활용 - PostgreSQL 중심)
7. Sending Emails
8. Syndication Feeds (RSS/Atom)
9. Sitemaps

* 웹 애플리케이션 기본 구조
클라이언트 - 웹 브라우저
서버 - 프레임워크로 만드는 웹 서버(Django), DB 서버, 캐시 서버

웹 서버(Django) - URLConf : URL 별로 호출할 함수를 리스트에 등록
              - 뷰 : URL에 맞춰 호출된 함수(모델을 통해 DB서버와 인터페이싱)
              - 모델 : 파이썬 코드로 DB와 통신
              - 템플릿 엔진 : 복잡한 문자열을 손쉽게 조합(문자열 렌더링 엔진)

* 모델 예시
shop/models.py
from django.db import models
class Item(models.Model):
    name = models.CharField(max_length=100)
    desc = models.TextField(blank=True)    # blank=True : 빈칸이어도 된다다
    price = models.PositiveIntegerField()
    created_at = models.DateTimeField(auto_now_add=True)   # auto_now_add : add될 당시의 현재 시간 자동 저장
    updated_at = models.DateTimeField(auto_now=True)   # auto_now : 저장될 때마다 시간 자동 저장

* URLConf 예시
shop/urls.py
from django.urls import path
from shop import views
app_name = 'shop'
urlpatterns = [
    path('shop/', views.item_list),     # URL과 함수 연결
]

* 뷰 예시
장고앱1/views.py
from django.shortcuts import render from shop.models import Item
def item_list(request):
    qs = Item.objects.all()    # DB로부터 Item목록을 Fetch할 예정
    return render(request, 'shop/item_list.html', {
        'item_list': qs,
    })

* 템플릿 예시
shop/templates/shop/item_list.html


03. 장고 앱
* 장고 앱의 필요성
현재 프로젝트의 블로그 기능을 다른 프로젝트에서도 사용하려할 때(장고 앱 형태로 격리)
python manage.py startapp <앱이름>  :  기본 앱템플릿 생성 명령
재사용성을 목적으로 한 파이썬 패키지(앱이름은 현재 프로젝트에서 유일해야 함)
새롭게 생성한 장고앱, 외부 라이브러리 형태의 장고앱은 꼭 settings.INSTALLED_APPS에 등록시켜줘야 함

* models/views 모듈을 패키지로 전환?
모듈 : 파이썬 소스코드 파일
패키지 : 파이썬 소스코드 디렉토리
1. shop/models.py 내 Item모델, Review모델
2. shop/models/  - __init__.py에서 from .item import *와 같이 임포트(모델 외부에서는 1과 동일하게 사용 가능)


04. VSCode 장고 디버깅 세팅하기
* 디버깅의 필요성
* VSCode의 디버깅
runserver 서버 시작옵션 : --noreload, --nothreading (소스코드를 변경해도 자동 재시작x)
*Pylint 메세지
- C0103 : 타입에 맞지않는 네이밍을 썼을 때
- C0111 : docstring을 정의하지 않았을 때
- C0301 : 1줄 글자수를 초과했을 때
    • max-line-length 옵션 디폴트 : 80
    • PEP8에서는 1줄 최대 79자로 제한
- C0326 : 공백을 잘못 입력했을 때

* pylint Error 대응하기
pip를 통해 pylint-django 설치(pip install pylint-django)
vscode의 설정에 pylintArgs 옵션을 적용


05.URLConf와 정규 표현식
* 정규 표현식
거의 모든 프로그래밍 언어에서 지원
문자열의 패턴, 규칙을 정의
장고 URL Dispatcher에서는 정규표현식을 통한 URL 매칭
문법 : 1글자에 대한 패턴 + 연속된 출연 횟수 지정, 대괄호 내에 1글자에 대한 후보 글자들 나열

* 다양한 정규 표현식 패턴 예시
1자리 숫자 : [0123456789], [0-9], [\d]
2자리 숫자 : [0123456789][0123456789], [0-9][0-9], \d\d
3자리 숫자 : \d\d\d, \d{3}
2자리~4자리 숫자 : \d{2, 4}
휴대폰 번호 : 010[1-9]\d{7}
알파벳 소문자 1글자 : [a-z]

* 반복횟수 지정 문법
r"\d" : 1회 반복
r"\d{2}" : 2회 반복
r"\d{2}" : 2회 반복
r"\d{2, 4}" : 2~4회 반복
r"\d?" : 0회 혹은 1회 반복
r"\d*" : 0회 이상 반복
r"\d+" : 1회 이상 반복

* URL Dispatcher
특정 URL 패틴 -> View의 List
프로젝트/settings.py에서 최상위 URLConf 모듈을 지정
HTTP 요청이 들어올 때마다 URL 매칭 시도
    매칭이 되는 URL Rule이 다수 존재하더라도 처음 Rule만을 사용
    매칭 안되면 404 Page Not Found 응답 발생

* path() 와 re_path()
정규표현식에서 문자의 시작 : ^
        문자의 끝 : $
URL 뒤에는 꼭 / 붙여주기

* 기본 제공되는 Path Converters
- StringConverter : r"[^/]+"
- IntConverter : r"[0-9]+"
- SlugConverter : r"[-a-zA-Z0-9_]+"
- UUIDConverter : -을 포함한 총 36개의 패턴
    r"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
- PathConverter : r".+"

* 커스텀 Path Converter
to_python : url로부터 추출한 문자열을 뷰에 넘겨주기 전에 변환
to_url : url reverse 시에 호출

* 새로운 장고 앱을 생성할 때, 추천 작업
1. 앱 생성
2. 앱이름/urls.py 파일 생성
3. 프로젝트/urls.py에 include 적용
4. 프로젝트/settings.py의 INSTALLED_APPS에 앱 이름 등록


06.다양한 응답의 함수 기반 뷰 만들기
* View
1개의 HTTP 요청에 대해 1개의 뷰가 호출
urls.py/urlpatterns 리스트에 매핑된 호출 가능한 객체(함수도 가능)
웹 클라이언트로부터의 HTTP 요청을 처리
- 2가지 형태의 뷰
함수 기반 뷰 - 기본
클래스 기반 뷰 - 클래스.as_view()를 통해 생성, 리턴

* View 호출 시 인자(HttpRequest 객체 및 URL Captured Values)
1번째 인자 : HttpRequest 객체(현재 요청에 대한 모든 내역)
2번째~ 인자 : 현재 요청의 URL로부터 Capture된 문자열들
    url/re_path를 통한 처리 - 모든 인자는 str 타입
    path를 통한 처리 - 매핑된 Converter의 to_python에 맞게 변환된 값이 인자로 전달

* View 호출에 대한 리턴값(HttpResponse 객체)
필히 HttpResponse 객체를 리턴해야 함
파일like객체 혹은 str/bytes 타입의 응답 지원
파일 like 객체 : response.write(str객체 또는 bytes객체)

*HttpRequest와 HttpResponse 예시
- 요청
request.method : 현재의 요청이 GET인지 POST인지 알 수 있음
request.META : 현재 요청에 대한 META정보
request.GET, request.POST, request.FILES, request.body
- 응답
response = HttpResponse(content)  : 원시적인 방법
response.write(content)
response['Custom-Header'] = 'Custom Header Value'
return response

* FBV의 예(Item 목록 보기)
qs = Item.objects.all()   - 모든 Item 목록을 가져올 준비까지만 함(쿼리셋을 통해 레코드에 접근하고자할 때 가져옴)

* 클래스 기반의 호출 가능한 객체

* Excel 파일 다운로드 응답
파일 like 객체를 지정하면, 내부적으로 읽기를 시도(굳이 f.read()를 호출할 필요 x
with open(filepath, 'rb') as f:
    response = HttpResponse(f, content_type='application/vnd.ms-excel')

* Pandas를 통한 CSV 응답 생성
content_type='text/csv'

* Pandas를 통한 엑셀 응답 생성
content_type='application/vnd.ms-excel'

*